{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19040\viewh17400\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs28 \cf0 Notes for "tab" suite of utilities - Elihu Ihms
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b0\fs20 \cf0 Last revision date: 04.25.2011\
\
These Perl scripts are for the modification of tab or other character delimited data files. In particular, they are very useful for modifying long columns of information that must have a systemic or position-dependent change performed upon them. These types of data are commonly encountered when working with spectral (i.e. absorbance or fluorescence intensity) or the readings of a time-dependent experiment.\
\
The suite consists of several perl scripts, all of which should be set executable via 
\i chmod 700 
\i0 or the like. It would be most useful to either put them in a directory discoverable via your shell's $path. The scripts were designed to be piped together via the Unix pipe command "|", so that a cohesive workflow can be executed at once. For a brief description of any script's usage and options, you may execute it alone with a sole 
\f1 -h
\f0  option (help).\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tread
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tread -col \ul N\ulnone  [-start \ul N\ulnone  -end \ul N\ulnone  -w|-comma|-delimiter "\ul ?\ulnone "] [\ul file\ulnone ]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\i0 \cf0 \
tread extracts a single column of data from a delimited ASCII file, which it then outputs to STDOUT. If no file is specified, will read from STDIN. Delimiters may be specified explicitly through the 
\i -delimiter
\i0  option, or through the 
\i -whitespace
\i0  or 
\i -comma
\i0  delimiter options. If a delimiter is not specified, tread will default to strict tab-delimited behavior. The first column in a file is column 0, and similarly, the first line in a file is line 0. If the 
\i -start
\i0  option is not specified, tread will start reading from the first line. Likewise, if the -end option is not specified, tread will read to the end of the file.
\b\fs30 \
\

\b0\fs20 Options:\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural

\i \cf0 	
\f2 -col N 
\f0 		
\i0 Read column N of 
\f1 [\ul file\ulnone ]
\f0  (required)\

\i 	
\f2 -w
\f0 		
\i0 Break on whitespace
\i \
	
\f2 -comma
\f0 		
\i0 Break on commas
\i \
	
\f2 -delimiter "x
\f1\i0 "
\f0 	Break on delimiter "x"
\i \
	
\f2 -start N
\f0 		
\i0 Start reading from row N of 
\f1 [\ul file\ulnone ]
\f0\i \
	
\f2 -end N
\f0 		
\i0 End reading at row N of 
\f1 [\ul file\ulnone ]\

\f0\i 	
\f2 [\ul file\ulnone ]
\f0 		
\i0 File to read from (required)
\b\fs30 \

\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 trex
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 trex [delimiters] [-start N -end N -cols a,b,c...] [-title N] [-ext EXT]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\i0 \cf0 \
trex extracts every row in a passed dataset  (following identical delimiter rules as tread) to their own files. Delimiter identity is retained in the extraction process. Columns can be specified by the 
\i -start
\i0  or 
\i -end
\i0  options, or explicitly specified for extraction (and possible reordering) via the
\i  -cols
\i0  command. Issuing trex with the option 
\i -cols 3,0,1
\i0  would extract only the specified columns and write them in the resulting file as column3 (delimiter) column0 (delimiter) column1 (newline) . By default, the resulting row files are named after their row number in the parent file. The 
\i -title
\i0  option, however, enables the user to change the resulting row name to the value in the row specified. Note that rows with identical values in that column will be overwritten. Finally, the
\i  -ext
\i0  option allows for the specification of the resulting row file extension.
\b\fs30 \
\

\b0\fs20 Options:\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural

\i \cf0 	
\f2 [delimiters] 
\f0 	
\i0 See tread for delimiter specification options\

\i 	
\f2 -start N
\f0 		
\i0 Start extracting columns at column 
\f1 N
\f0 , default is zero.
\i \
	
\f2 -end N
\f0 		
\i0 Stop extracting at column 
\f1 N
\f0 , default is all columns.
\i \
	
\f2 -cols a,b,c...
\f0 	
\i0 Only extracts the columns specified in a comma-delimited list, and will write them to the resulting row file in the specified order.
\i \
	
\f2 -title N
\f0 		
\i0 Instead of writing row files named by their row number, use the value in column 
\f1 N
\f0 .
\i \
	
\f2 -ext "extension"
\f0 	
\i0 Use the specified file extension instead of ".tab"
\i \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\i0 \cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs30 \cf0 tmath
\i\b0\fs22 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\fs20 \cf0 math -f [\ul function\ulnone ]
\f0\i0 \
\
tmath systematically applies a mathematical function to every data element  in the passed data column. This can be very useful for removing an offset, or scaling data.\
\
Options:\
\pard\tx720\tx3240\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3240\fi-3240\sa100\ql\qnatural

\f2\i \cf0 	-f
\f1\i0  
\f2\i [\ul function\ulnone ] \ul N\ulnone 	
\f0\i0 Mathematical function to apply, where 
\f1 function
\f0  is "
\f1 add
\f0 ", "
\f1 subtract
\f0 ", "
\f1 multiply
\f0 ", "
\f1 divide
\f0 ", "
\f1 round
\f0 ", "
\f1 power
\f0 ", "
\f1 ln
\f0 ", "
\f1 log
\f0 ", or "
\f1 random
\f0 ". For "
\f1 ln
\f0 " and "
\f1 log
\f0 ", no second argument is required. For "
\f1 round
\f0 ", 
\f1 N
\f0  is the number of digits past the decimal to round to. For "
\f1 rand
\f0 ", 
\f1 N
\f0  is the maximum random value possible.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs30 \cf0 tmunge
\i\b0\fs22 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\fs20 \cf0 tmunge -f [\ul function\ulnone ] [\ul operator_file\ulnone ]
\f0\i0 \
\
tmunge applies an arithmetic function to each element in the passed list based upon a value found within the operator file of the same line number. Allowed functions are 
\i add, subtract, multiply, 
\i0  and 
\i divide.\
\
Options:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\sa100\ql\qnatural
\cf0 	
\f2 -f [\ul function\ulnone ]
\f0 	Mathematical function to apply. 
\f2 function
\f0  can be "
\f2 add
\f0 ", "
\f2 subtract
\f0 ", "
\f2 multiply
\f0 ", "
\f2 divide
\f0 ", "
\f2 chisq
\f0 ", or "
\f2 logchisq
\f0 ". For the latter two functions, the chi-square or log chi-square difference between the passed value and the corresponding operator file value will be calculated.\
	
\f2 [\ul operator_file\ulnone ]
\f0 	
\i0 Operator file to apply to the passed list. (Required)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tsmooth
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tsmooth [-mean \ul N\ulnone |-exp \ul N\ulnone |-sg \ul 5|7|9|11\ulnone ]
\f0\i0 \
\
Options:\
\pard\tx720\tx2880\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\sa100\ql\qnatural

\i \cf0 	
\f2 -mean
\f1\i0  
\f2\i N	
\f0\i0 A running mean smoothing over 
\i N
\i0  points.\

\i 	
\f2 -exp  N
\f0\i0 	Exponential smoothing (
\i N
\i0  can range from 0 to 1, with 1 meaning no smoothing and 0 for maximal smoothing).\

\i 	
\f2 -sg 5|7|9|11
\f0\i0 	Savitsky-Golay smoothing, over 5, 7, 9, or 11 points. Internal quadratic values are taken from 
\i http://www.chem.uoa.gr/applets/appletsmooth/appl_smooth2.html.
\i0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tcalc
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tcalc [-stddev|-sum|-avg|-max|-min]
\f0\i0 \
\
tcalc calculates a single value from a passed column of data. \
\
Options:\
\pard\tx720\tx2880\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\sa100\ql\qnatural

\i \cf0 	
\f2 -stddev	
\f0\i0 Calculates the standard deviation of the passed data column\

\i 	
\f2 -sum	
\f0\i0 Calculates the sum\

\i 	
\f2 -avg	
\f0\i0 Calculates the mean value\

\i 	
\f2 -max	
\f0\i0 Returns the maximum value\

\i 	
\f2 -min	
\f0\i0 Returns the minimum value\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tsnort
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tsnort -asc|-desc|-rev -op [file]
\f0\i0 \
\
tsnort 
\i numerically
\i0  sorts a column of data in the user-specified direction (if a direction is not specified, it is sorted in an ascending manner). Alternatively, an external single-column file 
\i with an identical number of rows of data as the passed column
\i0  can be used to determine the sort order of the passed column. tsnort is so named to not conflict with the gcc "tsort" topological sort utility.\
\
Options:\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural

\i \cf0 	
\f2 -asc 
\f0 		
\i0 Sort the data column in ascending order (default)\

\i 	
\f2 -desc 
\f0 		
\i0 Sort in descending order\

\i 	
\f2 -rev 
\f0 		
\i0 Reverses the order of the data column\

\f1 	-by [\ul sort file\ulnone ]	
\f0 Additional file containing a single column of data 
\i with an identical number of elements as the data to be sorted
\i0  that will dictate the final order of the passed data.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 twrite
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tinsert -col \ul N\ulnone  [-start \ul N\ulnone  -end \ul N\ulnone  -w|-comma|-delimiter "\ul ?\ulnone " (-out [\ul output file\ulnone ])] (-orig [\ul parent file\ulnone ] | [\ul parent file\ulnone ])
\f0\i0 \
\
twrite replaces a column of data in a file with the piped column of data. If the column does not exist, the file will be padded with tabs until the specified column number is met. \ul Note that data cannot extend past the last row of the destination file. \ulnone If the original file is specified with the -orig flag, the file itself 
\i will not
\i0  be modified, but the resulting text will be sent to stdout (unless the output file is specified with the -out option).\
\
Options:\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural

\i \cf0 	
\f2 -col N 
\f0 		
\i0 Write to column N of 
\f1 [\ul output file\ulnone ]
\f0  (required)\

\i 	
\f2 -w
\f0 		
\i0 Break on whitespace
\i \
	
\f2 -comma
\f0 		
\i0 Break on commas
\i \
	
\f2 -delimiter "x
\f1\i0 "
\f0 	Break on delimiter "x"
\i \
	
\f2 -start N
\f0 		
\i0 Start writing from row N of source
\i \
	
\f2 -end N
\f0 		
\i0 End writing at row N of source\

\i 	
\f2 -orig [\ul parent file\ulnone ]
\f0 	
\i0 The original file to insert the data into. If omitted, will simply read and write to the file specified by the last argument.\

\f1 	-out [\ul output file\ulnone ]	
\f0 File to write modified data to. Omitting this option will result in the changes being written to standard output
\f1 .\
	[\ul parent file\ulnone ]	
\f0 File to read from and (if no 
\f1 -out
\f0  file is specified) write the modified data back to.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 \
\
texchange
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 texchange ([-w|-comma|-delimiter "\ul ?\ulnone "] [\ul file\ulnone ]])
\f0\i0 \
\
texchange inverts a file containing rows and columns of data by exchanging rows for columns and visa versa. For example, if you had a file with 40 rows and 3 columns, texchange will convert that to a file with 3 rows and 40 columns. Note that although it can understand a wide number of delimiters (just like tread), it will 
\i always
\i0  output tab-delimited data\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\i \cf0 (See tread for delimiter options)
\i0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tinterpolate
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tinterpolate [x_data] [xy_data]
\f0\i0 \
\
tinterpolate linearly interpolates y values from a tab (or whitespace) delimited xy dataset to a file of provided x values. This utility is very good for prepping data for submission to tscale, as it will match the number of x values.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tscale
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tscale (-upper=N -lower=N -limit=N -grid=N -iter=N) (-log) (-save [file]) (-v) [match_file] [scaled_file]
\f0\i0 \
\
tscale finds a scaling coefficient that most closely matches one dataset to another. This is useful for overlaying and comparing data with different amplitudes. Note that the number of values in each file must be identical!\
\
Options:\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural

\i \cf0 	
\f2 -upper N 
\f0 		
\i0 The upper bound on the scaling coefficient (default is 100)\

\i 	
\f2 -lower N
\f0 		
\i0 The lower bound on the scaling coefficient (default is 0)
\i \
	
\f2 -limit N
\f0 		
\i0 The scaling coefficient resolution to meet (default is 0.0001)
\i \
	
\f2 -grid N	
\f0\i0 	The grid size to use when searching, larger numbers are good for highly discontinuous datasets (default is 10)
\i \
	
\f2 -iter N
\f0 		
\i0 The number of iterations after which to abort (default is 1000)
\i \
	
\f2 -log
\f0 		
\i0 Use a log SSE to calculate difference, instead of standard SSE, good for datasets with high dynamic range (e.g. SAXS data)\

\i 	
\f2 -save [\ul file\ulnone ]
\f0 	
\i0 The file to save the scaled values to (optional)\

\f1 	[\ul match file\ulnone ]	
\f0 The file containing a column of data that the 
\f1 scale_file
\f0  data should be fitted to.
\f1 \
	[\ul scale file\ulnone ]	
\f0 The file containing a column of data that should be scaled to match the data in 
\f1 match\ul _\ulnone file
\f0 .\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 tpad
\b0\fs20 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f2\i \cf0 tpad -col \ul N\ulnone  [-w|-comma|-delimiter "\ul ?\ulnone "] (-down) (-fill)
\f0\i0 \
\
tpad find and potentially fills gaps in columns of sequential data values. See the examples section for usage details.\
\
Options:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\i \cf0 	(see tread for delimiter options)\
\pard\tx720\tx2160\tx3420\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3420\fi-3420\sa100\ql\qnatural
\cf0 	
\f2 -col N 
\f0 		
\i0 The column of data to watch \

\i 	
\f2 -fill 
\f0 		
\i0 Should missing column values be filled in?\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b\fs28 \cf0 Examples
\b0\fs20 \
Assume the file "
\f1 file1.dat
\f0 ", containing the following data:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1 \cf0 1,1\
2,3\
3,7\
4,11\
7,13\
\

\f0 And the file "
\f1 operator.dat
\f0 ":\

\f1 -4\
-3\
-2\
-1\
0
\f0 \
\

\f1 $>tread -comma -col 0 -start 1 -end 4 file1.dat\
2
\f3\b\fs30 \

\f1\b0\fs20 3
\f3\b\fs30 \

\f1\b0\fs20 4
\f0 \
\

\f1 $>tread -comma -col 0 -start 1 -end 4 file1.dat | tcalc -avg\
3\

\f0 \

\f1 $>tread -comma -col 0 file1.dat | tmath -add 3
\f3\b\fs22 \

\f1\b0\fs20 4\
5\
6\
7\
10\

\f0 \

\f1 $>tread -comma -col 0 file1.dat | tmath -f add operator.dat
\f0 \

\f1 -3\
-1\
1\
3\
7
\f0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\b \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\b0 \cf0 $>tread -comma -col 0 file1.dat | tmath -f add operator.dat | \\\
tmath -f multiply operator.dat
\f0 \

\f1 12\
3\
-2\
-3\
0
\f0 \
\

\f1 $>tread -comma -col 0 file.dat | tsnort -desc -by operator.dat\
7\
4\
3\
2\
1
\f0 \
\

\f1 $>tread -comma -col 0 file1.dat | tsmooth -exp 0.5 | \\\
tinsert -col 2 -start 1 -out smoothed.dat\

\f0 \
Result: (
\f1 smoothed.dat)
\f0 :\

\f1 1	1	\
2	3	1.46875\
3	7	2.18750\
4	11	3.00000\
7	13	3.81250\
\
$>texchange -comma file1.dat\
1	2	3	4	7\
1	3	7	11	13\
\
$>tpad -comma -col 0 -fill file1.dat\
1	1\
2	3\
3	7\
4	11\
5	\
6	\
7	13\
\

\f0 Note: by using unix redirection to files, individual columns or transformations can be easily saved.\
\

\f1 $>tread -comma -col 0 file.dat | tmath -f add 5 > added.dat\
$>tread -col 0 added.dat | tmath -f multiply 10 > multiplied.dat\
\

\f0 Result: \
(
\f1 added.dat)
\f0 :\

\f1 6\
7\
8\
9\
12\

\f0 \
(
\f1 multiplied.dat)
\f0 :\

\f1 60\
70\
80\
90\
120\
\
$>tscale added.dat multiplied.dat\
Converged to within 0.0001, scaling factor for added.dat to match multiplied.dat: 10}